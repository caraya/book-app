////
/// @group Code
/// @author [Carlos Araya](http://publishing-project.rivendellweb.net/)
////

/// Provides the basic elements for a CSS Grid layout. Some things to remember:
///
/// We are using a fluid width grid. The idea is to duplicate what we can do with existing framework grids but with an
///
/// @example
///   div .grid-container {
///     @include grid-wrapper();
///   }
///
/// @example
///   div .grid-container {
///     @include grid-wrapper(12, 16);
///   }
///
/// @access public
/// @param {Number} $columns [12] - Number of columns
/// @param (Number} $gutter [.5] - width of gutter expressed in ems. This equals 8 pixels
@mixin grid-wrapper ($columns: 12, $gutter: 8){
  display: grid;
  margin: 0 auto;
  width: 100%;
  max-width: 960px;
  grid-template-columns: repeat($columns, 1fr); // $columns columns of equal width
  grid-template-rows: auto; // This should make new rows while respecting our column template
  grid-row-gap: ($gutter * 1px);
  grid-column-gap: ($gutter * 1px);

}

/// Provides a shorthand to indicate column placement in the grid we created with `grid-wrapper`
///
///
/// @example
///   div .grid-container {
///     @include grid-wrapper();
///   }
///
/// @access public
/// @param {Number} $width [60] - width of the container expressed in ems. It assumes 1em = 16px.
/// @param {Number} $columns [16] - background color
/// @param (Number} $gutter [.5] - width of gutter expressed in ems. This equals 8 pixels
@mixin placement ($column-start, $column-end, $row-start, $row-end) {
  grid-row: $row-start / $row-end;
  grid-column: $column-start / $column-end;
}
